
用 add first 或 add last 这套新的 API 改写 Deque 的代码。 

package week01;

import java.util.Deque;
import java.util.LinkedList;

public class DequeTest {
	public void pushex() {
		Deque<String> deque = new LinkedList<String>();
		deque.push("a");
		deque.push("b");
		deque.push("c");
		System.out.println(deque);

		String str = deque.peek();
		System.out.println(str);
		System.out.println(deque);

		while (deque.size() > 0) {
			System.out.println(deque.pop());
		}
		System.out.println(deque);

	}
	public void pushex_af() {
		Deque<String> deque = new LinkedList<String>();
		deque.addFirst("a");
		deque.addFirst("b");
		deque.addFirst("c");
		System.out.println(deque);

		String str = deque.peek();
		System.out.println(str);
		System.out.println(deque);

		while (deque.size() > 0) {
			System.out.println(deque.pop());
		}
		System.out.println(deque);

	}
	public void pushex_al() {
		Deque<String> deque = new LinkedList<String>();
		deque.addLast("a");
		deque.addLast("b");
		deque.addLast("c");
		System.out.println(deque);

		String str = deque.peek();
		System.out.println(str);
		System.out.println(deque);

		while (deque.size() > 0) {
			System.out.println(deque.pop());
		}
		System.out.println(deque);

	}
	public static void main(String[] args) {
		DequeTest dt =new DequeTest();
		dt.pushex();
		System.out.println("----------------------");
		dt.pushex_af();
		System.out.println("----------------------");
		dt.pushex_al();
	}

}
[c, b, a]
c
[c, b, a]
c
b
a
[]
----------------------
[c, b, a]
c
[c, b, a]
c
b
a
[]
----------------------
[a, b, c]
a
[a, b, c]
a
b
c
[]

分析 Queue 和 Priority Queue 的源码。
在java中
Queue 为接口 实现类为链表，PriorityQueue 为实现类，是通过数组来实现
两者取元素类似，都是取首元素，但是添加元素不同，Queue直接添加到链表的尾部，而PriorityQueue是通过对元素或对象进行排序后存放
在读取过程中，需要删除元素。Queue 删除元素，删除链表的首元素，PriorityQueue 需要通过堆得形式补充堆顶的元素 


public interface Queue<E> extends Collection<E> 实现可以是 数组或者链表
实现的操作有
 boolean add(E e);
 boolean offer(E e);
 E remove();
 E poll();
 E element();
 E peek();
public class LinkedList<T> extends AbstractSequentialList<T>
  implements List<T>, Deque<T>, Cloneable, Serializable
  public boolean add(T o)
 394:   {
 395:     addLastEntry(new Entry<T>(o));
 396:     return true;
 397:   }
  public boolean offer(T value)
 720:   {
 721:     return add(value);
 722:   }
  private void addLastEntry(Entry<T> e) 通过链表的形式把新加的数据添加到链表尾
 345:   {
 346:     modCount++;
 347:     if (size == 0)
 348:       first = last = e;
 349:     else
 350:       {
 351:         e.previous = last;
 352:         last.next = e;
 353:         last = e;
 354:       }
 355:     size++;
 356:   }
  public T poll()
 733:   {
 734:     return getFirst();  获取链表的表首元素
 735:   }
 
 删除元素，删除链表的首元素 

public T removeFirst()
 267:   {
 268:     if (size == 0)
 269:       throw new NoSuchElementException();
 270:     modCount++;
 271:     size--;
 272:     T r = first.data;
 273: 
 274:     if (first.next != null)
 275:       first.next.previous = null;
 276:     else
 277:       last = null;
 278: 
 279:     first = first.next;
 280: 
 281:     return r;
 282:   } 
  
  
 PriorityQueue 为类，实现了自己的方法
 public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable
 
  public boolean offer(E o) 增加了bubbleUp 排序功能
 181:   {
 182:     if (o == null)
 183:       throw new NullPointerException();
 184: 
 185:     int slot = findSlot(-1);
 186: 
 187:     storage[slot] = o;
 188:     ++used;
 189:     bubbleUp(slot);
 190: 
 191:     return true;
 192:   }
  public E poll() 返回数组的首元素
 200:   {
 201:     if (used == 0)
 202:       return null;
 203:     E result = storage[0];
 204:     remove(0);
 205:     return result;
 206:   }
 是堆排序，首元素删除后，通过堆得形式，补充首元素，
 void remove(int index)
 272:   {
 273:     // Remove the element at INDEX.  We do this by finding the least
 274:     // child and moving it into place, then iterating until we reach
 275:     // the bottom of the tree.
 276:     while (storage[index] != null)
 277:       {
 278:         int child = 2 * index + 1;
 279: 
 280:         // See if we went off the end.
 281:         if (child >= storage.length)
 282:           {
 283:             storage[index] = null;
 284:             break;
 285:           }
 286: 
 287:         // Find which child we want to promote.  If one is not null,
 288:         // we pick it.  If both are null, it doesn't matter, we're
 289:         // about to leave.  If neither is null, pick the lesser.
 290:         if (child + 1 >= storage.length || storage[child + 1] == null)
 291:           {
 292:             // Nothing.
 293:           }
 294:         else if (storage[child] == null
 295:                  || (Collections.compare(storage[child], storage[child + 1],
 296:                                          comparator) > 0))
 297:           ++child;
 298:         storage[index] = storage[child];
 299:         index = child;
 300:       }
 301:     --used;
 302:   }