使用二分查找，寻找一个半有序数组 [4, 5, 6, 7, 0, 1, 2] 中间无序的地方 
在一个升序的数组中，如果一个值大于后面数组而小于前的数，则返回 此值的序号 即返回0的下标
2 通过二份查找，找到0的下表
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int search(int *arr,int numSize){
   int low = 0;
   int high = numSize -1 ;
   while(low <= high) {
       int mid = (low + high) / 2;
       if(arr[mid] < arr[mid - 1 <= 0 ? 0 : mid - 1 ] && arr[mid] <= arr[mid + 1 > high ? high : mid + 1]) {
               return mid;
       }else if ( arr[mid] > arr[high] ) {
            low = mid + 1 ;
         }else {
               high =  mid ;
           }
    } 
   return -1;
}

int main(int argc,char **argv)
{
    int arr[] = { 10,11,12,13,15,16,23, 25, 26, 27 };
    int n = search(arr,11);
    printf("n==%d\n",n);  
} 
